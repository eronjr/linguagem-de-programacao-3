# -*- coding: utf-8 -*-
"""GraficosMensais.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iwG4Bro1VUBQqZUFI5qdFgvfISLlgUlr
"""

#pip install httpx

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.widgets as wg
import httpx
from bs4 import BeautifulSoup as bs
from importlib import reload 
import openpyxl
import random
plt=reload(plt)

url_root = 'https://www.ssp.rs.gov.br'
url = 'https://www.ssp.rs.gov.br/indicadores-criminais' 

text = httpx.get(url)	
soup = bs(text,features="html.parser")
artigo__texto = soup.find('div',{'class':'artigo__texto'})
anos = artigo__texto.find_all('h2') 
url_downloads = artigo__texto.find_all('a')
files_links = []
for url in url_downloads[:12]:
	if url.text:
		url = url_root+f"{url.get('href')}"
		files_links.append(url)

#print(files_links)

#Retorna a lista de links dos .xlsx do ano de 2012 até 2022

"""A função getAno pega uma string contendo o ano e retona a tabela do ano correspondente"""

#ano3 = pd.read_excel('https://www.ssp.rs.gov.br/upload/arquivos/202005/13192638-site-geral-e-municipios-2014-publicacao.xlsx',sheet_name = 0, skiprows=5,nrows=12)

#ano1 = pd.read_excel('https://www.ssp.rs.gov.br/upload/arquivos/202005/13192856-site-geral-e-municipios-2012-publicacao.xlsx',sheet_name = 0, skiprows=5,nrows=12)

#ano2 = pd.read_excel('https://www.ssp.rs.gov.br/upload/arquivos/202005/13192731-site-geral-e-municipios-2013-publicacao.xlsx',sheet_name = 0, skiprows=5,nrows=12)

#ano1

#def getanoX(ano):
#  if ano == '2012':
#    return ano1
#  elif ano == '2013':
#    return ano2
#  elif ano == '2014':
#    return ano3

def intervaloAnos(Anoinicial,anoTermino):
  diferença = int(anoTermino) - int(Anoinicial)
  if diferença >= 0:
    anos = []
    for i in range(diferença+1):
      anos.append(str(int(Anoinicial) + i))
    return anos
  else:
    return "Intervalo inválido"

def getIndexMonth(ano,mes):
  month = getMes(mes)
  month = ano + '/' + month
  tabela = getAno(ano)
  listaMeses = list(tabela['Mês / Ocorrências'])
  idx = listaMeses.index(month)
  return idx

def getMes(mes):
  mes = mes.replace(mes[0],mes[0].upper())
  mes = mes[0:3]
  return mes

def getAno(ano):
  if ano == '2012':
    tabela = pd.read_excel(files_links[10],sheet_name = 0, skiprows=5,nrows=12)
    return tabela
  elif ano == '2013':
    tabela = pd.read_excel(files_links[9],sheet_name = 0,skiprows=5, nrows=12)
    return tabela
  elif ano == '2014':
    tabela = pd.read_excel(files_links[8],sheet_name = 0, skiprows=5,nrows=12)
    return tabela 
  elif ano == '2015':
    tabela = pd.read_excel(files_links[7],sheet_name = 0, skiprows=5,nrows=12)
    return tabela
  elif ano == '2016':
    tabela = pd.read_excel(files_links[6],sheet_name = 0,skiprows=5, nrows=12)
    return tabela
  elif ano == '2017':
    tabela = pd.read_excel(files_links[5],sheet_name = 0,skiprows=5, nrows=12)
    return tabela
  elif ano == '2018':
    tabela = pd.read_excel(files_links[4],sheet_name = 0,skiprows=5, nrows=12)
    return tabela
  elif ano == '2019':
    tabela = pd.read_excel(files_links[3],sheet_name = 0,skiprows=5, nrows=12)
    return tabela
  elif ano == '2020':
    tabela = pd.read_excel(files_links[2],sheet_name = 0,skiprows=5, nrows=12)
    return tabela
  elif ano == '2021':
    tabela = pd.read_excel(files_links[1],sheet_name = 0, skiprows=5,nrows=12)
    return tabela
  elif ano == '2022':
    tabela = pd.read_excel(files_links[0],sheet_name = 0, skiprows=5,nrows=12)
    return tabela
  else:
    return "Ano não indetificado"

"""A função ContagemAnual recebe um string do ano e uma lista de crimes(Os crimes tem que estar dentro de uma lista ['crimeA','crimeB']) e gera um grafico para cada crime ao longo dos meses daquele ano."""

def ContagemAnual(ano,crimes,save=True):
  tabela = getAno(ano)
  plt.rcParams["figure.figsize"] = (10,4)
  for crime in crimes:
    #figura = plt.figure(figsize=(15,5))
    color = "%06x" % random.randint(0, 0xFFFFFF)
    x = tabela['Mês / Ocorrências']
    y = tabela[crime]
    plt.ylabel("OCORRENCIAS")
    plt.xlabel("MESES")
    cor = "#" + color
    plt.plot(x,y,color=cor,label=crime)
    plt.xticks(rotation=45, ha="right")
    plt.legend()
    plt.title(f'{crime} no ano de {ano}')
    
    if save == False:
      plt.show()
    else:  
      plt.savefig(f"{crime} no ano de {ano}.png",bbox_inches = "tight")
      plt.clf()

#ContagemAnual('2013',['Roubos','Homicídio  Doloso'],save=False)
#tabela = ContagemAnual('2013',['Roubos'])

"""A função contagemMesFixo recebe as strings mes e ano e uma lista(tipo Lista) de crimes e retorna um grafico de barras contendo os crimes daquele determinado mês"""

def contagemMesFixo(ano, mes, listaCrimes,save=True):
  dt = getAno(ano)
  plt.rcParams["figure.figsize"] = (8,5)
  plt.rcParams['font.size'] = '12'
  mesX = getMes(mes)
  month = ano + '/' + mesX
  lista = list(dt['Mês / Ocorrências'])
  index = lista.index(month)
  crimes = dict(dt)
  crimes.pop('Unnamed: 0')
  crimes.pop('Mês / Ocorrências')
  dados = []
  for cr in listaCrimes:
    dados.append(crimes[cr][index])
  fig, ax = plt.subplots()
  plt.title(f"Crimes no mês de {mes} no ano de {ano}",fontsize=16)
  plt.xlabel("Crimes",fontsize=16)
  plt.ylabel("Ocorrências",fontsize=16)
  plt.yscale('log')
  bar_plot = plt.bar(listaCrimes,dados,tick_label=listaCrimes,width=0.4)
  def autolabel(rects):
    for idx,rect in enumerate(bar_plot):
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2., 1.05*height,
                dados[idx],
                ha='center', va='bottom', rotation=0)

  autolabel(bar_plot)
  
  if save == False:
      plt.show()
  else:  
      plt.savefig(f"{listaCrimes} no mes de {mes} em {ano}.png")
      plt.clf()

#contagemMesFixo('2013','Julho',['Estelionato','Furto','Latrocínio','Roubos'],save=False)

def contagemPeriodoHistorico(AnoInicio,anoTermino,MesInicio,MesTermino,listaCrimes,save=True):
  anos = intervaloAnos(AnoInicio,anoTermino)
  anoInicial = anos[0]
  anoFinal = anos[-1]
  mesInicial = MesInicio
  mesFinal = MesTermino
  listaC = listaCrimes
  plt.rcParams["figure.figsize"] = (18,5)
  plt.rcParams['font.size'] = '10'
  for cr in listaC:
    cor = "%06x" % random.randint(0, 0xFFFFFF)
    cor = '#' + cor
    plt.title(f"{cr} entre {mesInicial} de {anoInicial} e {mesFinal} de {anoFinal}",fontsize=16)
    dados = []
    eixoX = []
    for n in anos:
      tabela = getAno(n)
      crimes = dict(tabela)
      if anos[0] == n:
        #print(n,'primeiro ano, puxa a partir do mês inicial')
        indexMes = getIndexMonth(n,mesInicial)
        crimes.pop('Unnamed: 0')
        #crimes.pop('Mês / Ocorrências')
        for i in range(indexMes,12):
          dados.append(crimes[cr][i])
          eixoX.append(crimes['Mês / Ocorrências'][i])
        #print(cr," ",dados)
        #print(cr," ",eixoX)
      elif anos[-1] == n:
        #print(n,'ultimo ano, puxa ate o mês final')
        indexMes = getIndexMonth(n,mesFinal)
        crimes.pop('Unnamed: 0')
        #crimes.pop('Mês / Ocorrências')
        for i in range(0,indexMes+1):
          dados.append(crimes[cr][i])
          eixoX.append(crimes['Mês / Ocorrências'][i])
        #print(cr," ",dados)
        #print(cr," ",eixoX)
        #print("Mes",mesFinal," corresponde ao index ",indexMes)
      else:
        #print(n,'ano intermediario, puxa tudo')
        crimes.pop('Unnamed: 0')
        #crimes.pop('Mês / Ocorrências')
        for i in range(0,12):
          dados.append(crimes[cr][i])
          eixoX.append(crimes['Mês / Ocorrências'][i])
        #print(cr," ",dados)
        #print(cr," ",eixoX)
    plt.xlabel('Meses',fontsize=16)
    plt.ylabel('Ocorrências',fontsize=16)
    plt.xticks(rotation=45, ha="right")
    plt.plot(eixoX,dados,label=cr,color=cor)
    plt.legend()
    if save == False:
      plt.show()
    else:
      plt.savefig(f'{cr} entre {mesInicial} de {anoInicial} e {mesFinal} de {anoFinal}.png',bbox_inches = "tight")
      plt.clf()

#contagemPeriodoHistorico('2012','2015','Janeiro','dezembro',['Furto','Latrocínio','Estelionato'],save=False)

def contagemCrimesMensal(mes,listadeAnos,ListaCrimes,save=True):
  plt.rcParams["figure.figsize"] = (8,3)
  #plt.rcParams['font.size'] = '10'
  for cr in ListaCrimes:
    cor = "%06x" % random.randint(0, 0xFFFFFF)
    cor = '#' + cor
    plt.title(f'Ocorrências de {cr} nos mês de {mes} entre {listadeAnos[0]} e {listadeAnos[-1]}')
    dados = []
    eixoX = []
    for ano in listadeAnos:
      mesX = getMes(mes)
      eixoX.append(mesX + '/' + ano)
      year = getAno(ano)
      crimes = dict(year)
      month = ano + '/' + mesX
      listaMes = list(year['Mês / Ocorrências'])
      indexMes = listaMes.index(month)
      crimes.pop('Unnamed: 0')
      crimes.pop('Mês / Ocorrências')
      dados.append(crimes[cr][indexMes])
    plt.ylabel("OCORRENCIAS")
    plt.xlabel("MESES")
    plt.plot(eixoX,dados,color=cor,label=cr)
    plt.legend()
    if save == False:
      plt.show()
    else:
      plt.savefig(f'D:/python/local/graficos/grafico {cr} em {mes} de {ano}.png',bbox_inches = "tight")
      plt.clf()

#contagemCrimesMensal('abril',['2012','2013','2014','2015'],['Furto','Estelionato'],save=False)

#color = "%06x" % random.randint(0, 0xFFFFFF)
#hexa = "#" + color
#hexa

if __name__ == '__main__':
  contagemCrimesMensal('maio',['2012','2013','2014'],['Furto','Roubos'])